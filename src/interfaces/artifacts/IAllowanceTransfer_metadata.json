{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "AllowanceExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExcessiveInvalidation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "Lockdown",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "newNonce",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "oldNonce",
						"type": "uint48"
					}
				],
				"name": "NonceInvalidation",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "nonce",
						"type": "uint48"
					}
				],
				"name": "Permit",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint160",
						"name": "",
						"type": "uint160"
					},
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint48",
						"name": "newNonce",
						"type": "uint48"
					}
				],
				"name": "invalidateNonces",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							}
						],
						"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
						"name": "approvals",
						"type": "tuple[]"
					}
				],
				"name": "lockdown",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint160",
										"name": "amount",
										"type": "uint160"
									},
									{
										"internalType": "uint48",
										"name": "expiration",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "nonce",
										"type": "uint48"
									}
								],
								"internalType": "struct IAllowanceTransfer.PermitDetails[]",
								"name": "details",
								"type": "tuple[]"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sigDeadline",
								"type": "uint256"
							}
						],
						"internalType": "struct IAllowanceTransfer.PermitBatch",
						"name": "permitBatch",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint160",
										"name": "amount",
										"type": "uint160"
									},
									{
										"internalType": "uint48",
										"name": "expiration",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "nonce",
										"type": "uint48"
									}
								],
								"internalType": "struct IAllowanceTransfer.PermitDetails",
								"name": "details",
								"type": "tuple"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sigDeadline",
								"type": "uint256"
							}
						],
						"internalType": "struct IAllowanceTransfer.PermitSingle",
						"name": "permitSingle",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint160",
								"name": "amount",
								"type": "uint160"
							},
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							}
						],
						"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Requires user's token approval on the Permit2 contract",
			"errors": {
				"AllowanceExpired(uint256)": [
					{
						"params": {
							"deadline": "The timestamp at which the allowed amount is no longer valid"
						}
					}
				],
				"InsufficientAllowance(uint256)": [
					{
						"params": {
							"amount": "The maximum amount allowed"
						}
					}
				]
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address,address)": {
					"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
				},
				"approve(address,address,uint160,uint48)": {
					"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
					"params": {
						"amount": "The approved amount of the token",
						"expiration": "The timestamp at which the approval is no longer valid",
						"spender": "The spender address to approve",
						"token": "The token to approve"
					}
				},
				"invalidateNonces(address,address,uint48)": {
					"details": "Can't invalidate more than 2**16 nonces per transaction.",
					"params": {
						"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
						"spender": "The spender to invalidate nonces for",
						"token": "The token to invalidate nonces for"
					}
				},
				"lockdown((address,address)[])": {
					"params": {
						"approvals": "Array of approvals to revoke."
					}
				},
				"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
					"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
					"params": {
						"owner": "The owner of the tokens being approved",
						"permitSingle": "Data signed over by the owner specifying the terms of approval",
						"signature": "The owner's signature over the permit data"
					}
				},
				"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
					"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
					"params": {
						"owner": "The owner of the tokens being approved",
						"permitBatch": "Data signed over by the owner specifying the terms of approval",
						"signature": "The owner's signature over the permit data"
					}
				},
				"transferFrom((address,address,uint160,address)[])": {
					"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
					"params": {
						"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
					}
				},
				"transferFrom(address,address,uint160,address)": {
					"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
					"params": {
						"amount": "The amount of the token to transfer",
						"from": "The address to transfer from",
						"to": "The address of the recipient",
						"token": "The token address to transfer"
					}
				}
			},
			"title": "AllowanceTransfer",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"AllowanceExpired(uint256)": [
					{
						"notice": "Thrown when an allowance on a token has expired."
					}
				],
				"ExcessiveInvalidation()": [
					{
						"notice": "Thrown when too many nonces are invalidated."
					}
				],
				"InsufficientAllowance(uint256)": [
					{
						"notice": "Thrown when an allowance on a token has been depleted."
					}
				]
			},
			"events": {
				"Approval(address,address,address,uint160,uint48)": {
					"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
				},
				"Lockdown(address,address,address)": {
					"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
				},
				"NonceInvalidation(address,address,address,uint48,uint48)": {
					"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
				},
				"Permit(address,address,address,uint160,uint48,uint48)": {
					"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
				}
			},
			"kind": "user",
			"methods": {
				"allowance(address,address,address)": {
					"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
				},
				"approve(address,address,uint160,uint48)": {
					"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
				},
				"invalidateNonces(address,address,uint48)": {
					"notice": "Invalidate nonces for a given (token, spender) pair"
				},
				"lockdown((address,address)[])": {
					"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
				},
				"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
					"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
				},
				"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
					"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
				},
				"transferFrom((address,address,uint160,address)[])": {
					"notice": "Transfer approved tokens in a batch"
				},
				"transferFrom(address,address,uint160,address)": {
					"notice": "Transfer approved tokens from one address to another"
				}
			},
			"notice": "Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/contracts/interfaces/IAllowanceTransfer.sol": "IAllowanceTransfer"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"src/contracts/interfaces/IAllowanceTransfer.sol": {
			"keccak256": "0x10284e9330f77d7cdd46817fdd07fe7c6396a69d89c1b8ab6606842a876e2730",
			"license": "MIT",
			"urls": [
				"bzz-raw://5d83ea85e0f5f28bb1555fe6f39b191563717597a27d2348fd2e9a2a40152565",
				"dweb:/ipfs/Qme6dRSsmjungFj5pi5K1p6F7y3NyUKXZr2F5RhiMcutQG"
			]
		}
	},
	"version": 1
}