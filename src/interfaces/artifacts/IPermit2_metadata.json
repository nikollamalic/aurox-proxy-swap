{
	"compiler": {
		"version": "0.8.18+commit.87f61d96"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "AllowanceExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExcessiveInvalidation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "maxAmount",
						"type": "uint256"
					}
				],
				"name": "InvalidAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LengthMismatch",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "Lockdown",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "newNonce",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "oldNonce",
						"type": "uint48"
					}
				],
				"name": "NonceInvalidation",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "nonce",
						"type": "uint48"
					}
				],
				"name": "Permit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "word",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mask",
						"type": "uint256"
					}
				],
				"name": "UnorderedNonceInvalidation",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint160",
						"name": "",
						"type": "uint160"
					},
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint48",
						"name": "newNonce",
						"type": "uint48"
					}
				],
				"name": "invalidateNonces",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wordPos",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "mask",
						"type": "uint256"
					}
				],
				"name": "invalidateUnorderedNonces",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							}
						],
						"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
						"name": "approvals",
						"type": "tuple[]"
					}
				],
				"name": "lockdown",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "nonceBitmap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint160",
										"name": "amount",
										"type": "uint160"
									},
									{
										"internalType": "uint48",
										"name": "expiration",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "nonce",
										"type": "uint48"
									}
								],
								"internalType": "struct IAllowanceTransfer.PermitDetails[]",
								"name": "details",
								"type": "tuple[]"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sigDeadline",
								"type": "uint256"
							}
						],
						"internalType": "struct IAllowanceTransfer.PermitBatch",
						"name": "permitBatch",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint160",
										"name": "amount",
										"type": "uint160"
									},
									{
										"internalType": "uint48",
										"name": "expiration",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "nonce",
										"type": "uint48"
									}
								],
								"internalType": "struct IAllowanceTransfer.PermitDetails",
								"name": "details",
								"type": "tuple"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sigDeadline",
								"type": "uint256"
							}
						],
						"internalType": "struct IAllowanceTransfer.PermitSingle",
						"name": "permitSingle",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions",
								"name": "permitted",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
						"name": "transferDetails",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions[]",
								"name": "permitted",
								"type": "tuple[]"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions",
								"name": "permitted",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
						"name": "transferDetails",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "witness",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "witnessTypeString",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitWitnessTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions[]",
								"name": "permitted",
								"type": "tuple[]"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "witness",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "witnessTypeString",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitWitnessTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint160",
								"name": "amount",
								"type": "uint160"
							},
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							}
						],
						"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Users must approve Permit2 before calling any of the transfer functions.",
			"errors": {
				"AllowanceExpired(uint256)": [
					{
						"params": {
							"deadline": "The timestamp at which the allowed amount is no longer valid"
						}
					}
				],
				"InsufficientAllowance(uint256)": [
					{
						"params": {
							"amount": "The maximum amount allowed"
						}
					}
				],
				"InvalidAmount(uint256)": [
					{
						"params": {
							"maxAmount": "The maximum amount a spender can request to transfer"
						}
					}
				],
				"LengthMismatch()": [
					{
						"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
					}
				]
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address,address)": {
					"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
				},
				"approve(address,address,uint160,uint48)": {
					"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
					"params": {
						"amount": "The approved amount of the token",
						"expiration": "The timestamp at which the approval is no longer valid",
						"spender": "The spender address to approve",
						"token": "The token to approve"
					}
				},
				"invalidateNonces(address,address,uint48)": {
					"details": "Can't invalidate more than 2**16 nonces per transaction.",
					"params": {
						"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
						"spender": "The spender to invalidate nonces for",
						"token": "The token to invalidate nonces for"
					}
				},
				"invalidateUnorderedNonces(uint256,uint256)": {
					"details": "The wordPos is maxed at type(uint248).max",
					"params": {
						"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
						"wordPos": "A number to index the nonceBitmap at"
					}
				},
				"lockdown((address,address)[])": {
					"params": {
						"approvals": "Array of approvals to revoke."
					}
				},
				"nonceBitmap(address,uint256)": {
					"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
				},
				"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
					"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
					"params": {
						"owner": "The owner of the tokens being approved",
						"permitSingle": "Data signed over by the owner specifying the terms of approval",
						"signature": "The owner's signature over the permit data"
					}
				},
				"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
					"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
					"params": {
						"owner": "The owner of the tokens being approved",
						"permitBatch": "Data signed over by the owner specifying the terms of approval",
						"signature": "The owner's signature over the permit data"
					}
				},
				"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
					"details": "Reverts if the requested amount is greater than the permitted signed amount",
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "The spender's requested transfer details for the permitted token"
					}
				},
				"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "Specifies the recipient and requested amount for the token transfer"
					}
				},
				"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
					"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "The spender's requested transfer details for the permitted token",
						"witness": "Extra data to include when checking the user signature",
						"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
					}
				},
				"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
					"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "Specifies the recipient and requested amount for the token transfer",
						"witness": "Extra data to include when checking the user signature",
						"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
					}
				},
				"transferFrom((address,address,uint160,address)[])": {
					"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
					"params": {
						"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
					}
				},
				"transferFrom(address,address,uint160,address)": {
					"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
					"params": {
						"amount": "The amount of the token to transfer",
						"from": "The address to transfer from",
						"to": "The address of the recipient",
						"token": "The token address to transfer"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"AllowanceExpired(uint256)": [
					{
						"notice": "Thrown when an allowance on a token has expired."
					}
				],
				"ExcessiveInvalidation()": [
					{
						"notice": "Thrown when too many nonces are invalidated."
					}
				],
				"InsufficientAllowance(uint256)": [
					{
						"notice": "Thrown when an allowance on a token has been depleted."
					}
				],
				"InvalidAmount(uint256)": [
					{
						"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
					}
				],
				"LengthMismatch()": [
					{
						"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
					}
				]
			},
			"events": {
				"Approval(address,address,address,uint160,uint48)": {
					"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
				},
				"Lockdown(address,address,address)": {
					"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
				},
				"NonceInvalidation(address,address,address,uint48,uint48)": {
					"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
				},
				"Permit(address,address,address,uint160,uint48,uint48)": {
					"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
				},
				"UnorderedNonceInvalidation(address,uint256,uint256)": {
					"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
				}
			},
			"kind": "user",
			"methods": {
				"allowance(address,address,address)": {
					"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
				},
				"approve(address,address,uint160,uint48)": {
					"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
				},
				"invalidateNonces(address,address,uint48)": {
					"notice": "Invalidate nonces for a given (token, spender) pair"
				},
				"invalidateUnorderedNonces(uint256,uint256)": {
					"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
				},
				"lockdown((address,address)[])": {
					"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
				},
				"nonceBitmap(address,uint256)": {
					"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
				},
				"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
					"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
				},
				"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
					"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
				},
				"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
					"notice": "Transfers a token using a signed permit message"
				},
				"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
					"notice": "Transfers multiple tokens using a signed permit message"
				},
				"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
					"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
				},
				"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
					"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
				},
				"transferFrom((address,address,uint160,address)[])": {
					"notice": "Transfer approved tokens in a batch"
				},
				"transferFrom(address,address,uint160,address)": {
					"notice": "Transfer approved tokens from one address to another"
				}
			},
			"notice": "Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/contracts/interfaces/IPermit2.sol": "IPermit2"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"src/contracts/interfaces/IAllowanceTransfer.sol": {
			"keccak256": "0xace8847ce130f6291244cec82f337f325ef1890c85c6d2b482e15af24cb60e32",
			"license": "MIT",
			"urls": [
				"bzz-raw://754c710a2b5431edbb994b8a4a04f3cf0848c311dda4fd8e2c8ca5e7be88ac49",
				"dweb:/ipfs/Qmcnk17DSocAzqzN9r1NWFQygxbKjUgFVoeq54UZacBcmh"
			]
		},
		"src/contracts/interfaces/IPermit2.sol": {
			"keccak256": "0x8fdd948eff2164558a8bff6ca9dcd16a65b33ba9c5f9e84f47239d0bfccfa70b",
			"license": "MIT",
			"urls": [
				"bzz-raw://c42dc49bf270caae58cbe2d49775196ec79bbf3c87031497837afcba79f6bdc4",
				"dweb:/ipfs/QmTxH4SJaMepRP95ECoghbuXRqiyM9LfNSynQRcLacTySZ"
			]
		},
		"src/contracts/interfaces/ISignatureTransfer.sol": {
			"keccak256": "0x69a2f47fdfcf179c9579bacfbd02e614b635aefe5d475dd7f2a1a6347d00fd8d",
			"license": "MIT",
			"urls": [
				"bzz-raw://57d64483243e4275e37f578ce9afb45aac2b3e120cc03e91189d645a0c6a7eb9",
				"dweb:/ipfs/QmaSaVSeDvi5i1r2b5P2qv7HFyK2vAj51ggNciFfo6A19V"
			]
		}
	},
	"version": 1
}